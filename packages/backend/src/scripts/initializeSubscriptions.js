const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

/**
 * Script para inicializar suscripciones para restaurantes existentes
 * y crear el primer super usuario
 */
async function initializeSubscriptions() {
  try {
    console.log('üöÄ Iniciando inicializaci√≥n de suscripciones...');

    // 1. Crear super usuario inicial si no existe
    const existingSuperUser = await prisma.superUsuario.findFirst();
    
    if (!existingSuperUser) {
      const hashedPassword = await bcrypt.hash('SuperAdmin123!', 12);
      
      const superUser = await prisma.superUsuario.create({
        data: {
          email: 'admin@menuview.app',
          password: hashedPassword,
          nombre: 'Super',
          apellido: 'Administrador'
        }
      });
      
      console.log('‚úÖ Super usuario creado:', superUser.email);
    } else {
      console.log('‚ÑπÔ∏è  Super usuario ya existe:', existingSuperUser.email);
    }

    // 2. Obtener todos los restaurantes sin suscripci√≥n
    const restaurantesSinSuscripcion = await prisma.restaurante.findMany({
      where: {
        suscripcion: null
      },
      include: {
        plan: true
      }
    });

    console.log(`üìä Encontrados ${restaurantesSinSuscripcion.length} restaurantes sin suscripci√≥n`);

    // 3. Crear suscripciones para restaurantes existentes
    for (const restaurante of restaurantesSinSuscripcion) {
      // Calcular fecha de vencimiento (30 d√≠as desde hoy para plan gratuito, 1 mes para otros)
      const fechaVencimiento = new Date();
      
      if (restaurante.plan.nombre === 'GRATUITO') {
        fechaVencimiento.setDate(fechaVencimiento.getDate() + 30); // 30 d√≠as
      } else {
        fechaVencimiento.setMonth(fechaVencimiento.getMonth() + 1); // 1 mes
      }

      const suscripcion = await prisma.suscripcion.create({
        data: {
          restauranteId: restaurante.id,
          planId: restaurante.planId,
          estado: 'ACTIVA',
          fechaInicio: new Date(),
          fechaVencimiento,
          mesesPagados: 1,
          notasAdmin: 'Suscripci√≥n inicial creada autom√°ticamente'
        }
      });

      console.log(`‚úÖ Suscripci√≥n creada para ${restaurante.nombre} (${restaurante.plan.nombre})`);

      // Crear notificaci√≥n de bienvenida
      await prisma.notificacionUsuario.create({
        data: {
          restauranteId: restaurante.id,
          tipo: 'BIENVENIDA',
          titulo: '¬°Bienvenido al Sistema de Suscripciones!',
          mensaje: `Su suscripci√≥n al plan ${restaurante.plan.nombre} est√° activa hasta ${fechaVencimiento.toLocaleDateString()}. Puede revisar los detalles de su suscripci√≥n en el panel de administraci√≥n.`
        }
      });
    }

    // 4. Mostrar estad√≠sticas finales
    const estadisticas = await prisma.suscripcion.groupBy({
      by: ['estado'],
      _count: {
        id: true
      }
    });

    console.log('\nüìà Estad√≠sticas de suscripciones:');
    estadisticas.forEach(stat => {
      console.log(`   ${stat.estado}: ${stat._count.id} suscripciones`);
    });

    const totalSuscripciones = await prisma.suscripcion.count();
    console.log(`   TOTAL: ${totalSuscripciones} suscripciones`);

    console.log('\nüéâ Inicializaci√≥n completada exitosamente!');
    console.log('\nüìù Credenciales del Super Usuario:');
    console.log('   Email: admin@menuview.app');
    console.log('   Password: SuperAdmin123!');
    console.log('\nüîó Endpoints disponibles:');
    console.log('   POST /api/super-admin/auth/login');
    console.log('   GET  /api/super-admin/subscriptions');
    console.log('   GET  /api/super-admin/subscriptions/stats');

  } catch (error) {
    console.error('‚ùå Error durante la inicializaci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar script si se llama directamente
if (require.main === module) {
  initializeSubscriptions()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

module.exports = { initializeSubscriptions }; 