const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * Script para bloqueo autom√°tico de suscripciones vencidas
 * Puede ejecutarse como cron job o manualmente
 */
async function autoBlockExpiredSubscriptions(options = {}) {
  try {
    const {
      gracePeriodDays = 3,
      dryRun = false,
      notifyUsers = true,
      logLevel = 'info' // 'silent', 'info', 'verbose'
    } = options;

    const log = (message, level = 'info') => {
      if (logLevel === 'silent') return;
      if (logLevel === 'verbose' || level === 'info') {
        console.log(`[${new Date().toISOString()}] ${message}`);
      }
    };

    log('üöÄ Iniciando proceso de bloqueo autom√°tico de suscripciones vencidas...');
    log(`üìã Configuraci√≥n: Per√≠odo de gracia: ${gracePeriodDays} d√≠as, Modo: ${dryRun ? 'SIMULACI√ìN' : 'EJECUCI√ìN'}, Notificar: ${notifyUsers}`);

    const fechaLimite = new Date();
    fechaLimite.setDate(fechaLimite.getDate() - gracePeriodDays);

    // Buscar suscripciones vencidas que a√∫n est√°n activas
    const suscripcionesVencidas = await prisma.suscripcion.findMany({
      where: {
        estado: 'ACTIVA',
        fechaVencimiento: {
          lt: fechaLimite
        }
      },
      include: {
        restaurante: {
          select: {
            id: true,
            nombre: true,
            email: true,
            activo: true,
            slug: true
          }
        },
        plan: {
          select: {
            id: true,
            nombre: true,
            precio: true
          }
        }
      }
    });

    log(`üìä Encontradas ${suscripcionesVencidas.length} suscripciones vencidas que requieren bloqueo`);

    if (suscripcionesVencidas.length === 0) {
      log('‚úÖ No hay suscripciones que requieran bloqueo autom√°tico');
      return {
        success: true,
        suscripcionesProcesadas: 0,
        suscripcionesBloqueadas: 0,
        restaurantesSuspendidos: 0,
        notificacionesEnviadas: 0,
        detalles: []
      };
    }

    let resultado = {
      suscripcionesProcesadas: suscripcionesVencidas.length,
      suscripcionesBloqueadas: 0,
      restaurantesSuspendidos: 0,
      notificacionesEnviadas: 0,
      detalles: [],
      errores: []
    };

    if (!dryRun) {
      // Ejecutar bloqueos en transacci√≥n
      log('üîí Ejecutando bloqueos autom√°ticos...');
      
      await prisma.$transaction(async (tx) => {
        for (const suscripcion of suscripcionesVencidas) {
          try {
            const diasVencida = Math.floor((new Date() - new Date(suscripcion.fechaVencimiento)) / (1000 * 60 * 60 * 24));

            log(`   Procesando: ${suscripcion.restaurante.nombre} (${diasVencida} d√≠as vencida)`, 'verbose');

            // Actualizar suscripci√≥n a VENCIDA
            await tx.suscripcion.update({
              where: { id: suscripcion.id },
              data: { 
                estado: 'VENCIDA',
                notasAdmin: `Bloqueada autom√°ticamente el ${new Date().toISOString()} despu√©s de ${diasVencida} d√≠as de vencimiento. Per√≠odo de gracia: ${gracePeriodDays} d√≠as.`
              }
            });

            // Suspender el restaurante si est√° activo
            let restauranteSuspendido = false;
            if (suscripcion.restaurante.activo) {
              await tx.restaurante.update({
                where: { id: suscripcion.restauranteId },
                data: { activo: false }
              });
              restauranteSuspendido = true;
              resultado.restaurantesSuspendidos++;
              log(`   ‚è∏Ô∏è  Restaurante suspendido: ${suscripcion.restaurante.nombre}`, 'verbose');
            }

            resultado.suscripcionesBloqueadas++;

            // Crear notificaci√≥n si est√° habilitado
            if (notifyUsers) {
              await tx.notificacionUsuario.create({
                data: {
                  restauranteId: suscripcion.restauranteId,
                  tipo: 'SUSCRIPCION_VENCIDA',
                  titulo: 'Suscripci√≥n Vencida - Servicio Suspendido',
                  mensaje: `Su suscripci√≥n al plan "${suscripcion.plan.nombre}" venci√≥ hace ${diasVencida} d√≠as y el servicio ha sido suspendido autom√°ticamente. Para reactivar su cuenta, por favor renueve su suscripci√≥n contactando a nuestro equipo de soporte.`,
                  notificationKey: `auto-block-${suscripcion.id}-${new Date().toISOString().split('T')[0]}`
                }
              });
              resultado.notificacionesEnviadas++;
              log(`   üìß Notificaci√≥n enviada a: ${suscripcion.restaurante.email}`, 'verbose');
            }

            resultado.detalles.push({
              restauranteId: suscripcion.restauranteId,
              restauranteNombre: suscripcion.restaurante.nombre,
              restauranteEmail: suscripcion.restaurante.email,
              planNombre: suscripcion.plan.nombre,
              fechaVencimiento: suscripcion.fechaVencimiento,
              diasVencida,
              restauranteSuspendido,
              notificacionEnviada: notifyUsers
            });

            log(`   ‚úÖ Procesado exitosamente: ${suscripcion.restaurante.nombre}`, 'verbose');

          } catch (error) {
            log(`   ‚ùå Error procesando ${suscripcion.restaurante.nombre}: ${error.message}`, 'verbose');
            resultado.errores.push({
              restauranteId: suscripcion.restauranteId,
              restauranteNombre: suscripcion.restaurante.nombre,
              error: error.message
            });
          }
        }
      });
    } else {
      // Modo simulaci√≥n - solo generar reporte
      log('üß™ Modo simulaci√≥n - generando reporte...');
      
      for (const suscripcion of suscripcionesVencidas) {
        const diasVencida = Math.floor((new Date() - new Date(suscripcion.fechaVencimiento)) / (1000 * 60 * 60 * 24));
        
        resultado.detalles.push({
          restauranteId: suscripcion.restauranteId,
          restauranteNombre: suscripcion.restaurante.nombre,
          restauranteEmail: suscripcion.restaurante.email,
          planNombre: suscripcion.plan.nombre,
          fechaVencimiento: suscripcion.fechaVencimiento,
          diasVencida,
          restauranteSuspendido: suscripcion.restaurante.activo, // Se suspender√≠a
          notificacionEnviada: notifyUsers,
          simulacion: true
        });

        log(`   üìã ${suscripcion.restaurante.nombre}: ${diasVencida} d√≠as vencida - ${suscripcion.restaurante.activo ? 'SE SUSPENDER√çA' : 'YA SUSPENDIDO'}`, 'verbose');
      }
    }

    // Resumen final
    log('');
    log('üìà RESUMEN DE EJECUCI√ìN:');
    log(`   ‚Ä¢ Suscripciones procesadas: ${resultado.suscripcionesProcesadas}`);
    log(`   ‚Ä¢ Suscripciones bloqueadas: ${resultado.suscripcionesBloqueadas}`);
    log(`   ‚Ä¢ Restaurantes suspendidos: ${resultado.restaurantesSuspendidos}`);
    log(`   ‚Ä¢ Notificaciones enviadas: ${resultado.notificacionesEnviadas}`);
    if (resultado.errores.length > 0) {
      log(`   ‚Ä¢ Errores: ${resultado.errores.length}`);
    }
    log('');

    if (dryRun) {
      log('üß™ SIMULACI√ìN COMPLETADA - No se realizaron cambios en la base de datos');
    } else {
      log('‚úÖ BLOQUEO AUTOM√ÅTICO COMPLETADO');
    }

    return {
      success: true,
      ...resultado,
      fechaEjecucion: new Date().toISOString(),
      configuracion: {
        gracePeriodDays,
        dryRun,
        notifyUsers
      }
    };

  } catch (error) {
    console.error('‚ùå Error en bloqueo autom√°tico:', error);
    return {
      success: false,
      error: error.message,
      fechaEjecucion: new Date().toISOString()
    };
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n para enviar recordatorios antes del vencimiento
async function sendExpirationReminders(options = {}) {
  try {
    const {
      reminderDays = [7, 3, 1], // Enviar recordatorios 7, 3 y 1 d√≠a antes del vencimiento
      logLevel = 'info'
    } = options;

    const log = (message, level = 'info') => {
      if (logLevel === 'silent') return;
      if (logLevel === 'verbose' || level === 'info') {
        console.log(`[${new Date().toISOString()}] ${message}`);
      }
    };

    log('üìß Iniciando env√≠o de recordatorios de vencimiento...');

    let totalRecordatorios = 0;

    for (const days of reminderDays) {
      const fechaLimite = new Date();
      fechaLimite.setDate(fechaLimite.getDate() + days);
      fechaLimite.setHours(23, 59, 59, 999); // Final del d√≠a

      const fechaInicio = new Date(fechaLimite);
      fechaInicio.setHours(0, 0, 0, 0); // Inicio del d√≠a

      // Buscar suscripciones que vencen en X d√≠as
      const suscripcionesProximas = await prisma.suscripcion.findMany({
        where: {
          estado: 'ACTIVA',
          fechaVencimiento: {
            gte: fechaInicio,
            lte: fechaLimite
          }
        },
        include: {
          restaurante: {
            select: {
              id: true,
              nombre: true,
              email: true
            }
          },
          plan: {
            select: {
              nombre: true,
              precio: true
            }
          }
        }
      });

      log(`üìÖ Suscripciones que vencen en ${days} d√≠a(s): ${suscripcionesProximas.length}`);

      for (const suscripcion of suscripcionesProximas) {
        // Verificar si ya se envi√≥ recordatorio para este d√≠a
        const notificacionExistente = await prisma.notificacionUsuario.findFirst({
          where: {
            restauranteId: suscripcion.restauranteId,
            notificationKey: `reminder-${days}d-${suscripcion.id}`
          }
        });

        if (!notificacionExistente) {
          await prisma.notificacionUsuario.create({
            data: {
              restauranteId: suscripcion.restauranteId,
              tipo: 'RENOVACION_PROXIMA',
              titulo: `Recordatorio: Su suscripci√≥n vence en ${days} d√≠a${days !== 1 ? 's' : ''}`,
              mensaje: `Su suscripci√≥n al plan "${suscripcion.plan.nombre}" vencer√° el ${suscripcion.fechaVencimiento.toLocaleDateString()}. Para evitar interrupciones en el servicio, renueve su suscripci√≥n antes de la fecha de vencimiento.`,
              notificationKey: `reminder-${days}d-${suscripcion.id}`
            }
          });

          totalRecordatorios++;
          log(`   üìß Recordatorio enviado a: ${suscripcion.restaurante.nombre}`, 'verbose');
        }
      }
    }

    log(`‚úÖ Env√≠o de recordatorios completado: ${totalRecordatorios} recordatorios enviados`);

    return {
      success: true,
      recordatoriosEnviados: totalRecordatorios,
      fechaEjecucion: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå Error enviando recordatorios:', error);
    return {
      success: false,
      error: error.message,
      fechaEjecucion: new Date().toISOString()
    };
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar script si se llama directamente
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || 'block';
  
  const parseArgs = (args) => {
    const options = {};
    for (let i = 0; i < args.length; i++) {
      if (args[i].startsWith('--')) {
        const key = args[i].substring(2);
        const value = args[i + 1];
        
        if (key === 'dry-run') {
          options.dryRun = true;
        } else if (key === 'no-notify') {
          options.notifyUsers = false;
        } else if (key === 'grace-days' && value) {
          options.gracePeriodDays = parseInt(value);
          i++;
        } else if (key === 'log-level' && value) {
          options.logLevel = value;
          i++;
        }
      }
    }
    return options;
  };

  const options = parseArgs(args);

  if (command === 'block') {
    autoBlockExpiredSubscriptions(options)
      .then((result) => {
        if (result.success) {
          console.log('\n‚úÖ Script de bloqueo autom√°tico completado exitosamente');
          process.exit(0);
        } else {
          console.error('\n‚ùå Script de bloqueo autom√°tico fall√≥:', result.error);
          process.exit(1);
        }
      })
      .catch((error) => {
        console.error('\n‚ùå Error ejecutando script de bloqueo autom√°tico:', error);
        process.exit(1);
      });
  } else if (command === 'reminders') {
    sendExpirationReminders(options)
      .then((result) => {
        if (result.success) {
          console.log('\n‚úÖ Script de recordatorios completado exitosamente');
          process.exit(0);
        } else {
          console.error('\n‚ùå Script de recordatorios fall√≥:', result.error);
          process.exit(1);
        }
      })
      .catch((error) => {
        console.error('\n‚ùå Error ejecutando script de recordatorios:', error);
        process.exit(1);
      });
  } else {
    console.log(`
üìã USO DEL SCRIPT:

BLOQUEO AUTOM√ÅTICO:
  node autoBlockExpiredSubscriptions.js block [opciones]

RECORDATORIOS:
  node autoBlockExpiredSubscriptions.js reminders [opciones]

OPCIONES:
  --dry-run              Solo simular, no ejecutar cambios
  --no-notify            No enviar notificaciones a usuarios
  --grace-days <d√≠as>    D√≠as de gracia despu√©s del vencimiento (default: 3)
  --log-level <nivel>    Nivel de log: silent, info, verbose (default: info)

EJEMPLOS:
  # Simulaci√≥n de bloqueo autom√°tico
  node autoBlockExpiredSubscriptions.js block --dry-run

  # Bloqueo real con per√≠odo de gracia de 5 d√≠as
  node autoBlockExpiredSubscriptions.js block --grace-days 5

  # Enviar recordatorios sin logs verbosos
  node autoBlockExpiredSubscriptions.js reminders --log-level silent

CONFIGURACI√ìN CRON:
  # Ejecutar bloqueo autom√°tico todos los d√≠as a las 2:00 AM
  0 2 * * * cd /path/to/project && node packages/backend/src/scripts/autoBlockExpiredSubscriptions.js block

  # Enviar recordatorios todos los d√≠as a las 9:00 AM
  0 9 * * * cd /path/to/project && node packages/backend/src/scripts/autoBlockExpiredSubscriptions.js reminders
`);
    process.exit(0);
  }
}

module.exports = { 
  autoBlockExpiredSubscriptions, 
  sendExpirationReminders 
}; 