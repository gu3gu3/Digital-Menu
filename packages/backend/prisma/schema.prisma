// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para los planes
enum TipoPlan {
  GRATUITO
  BASICO
  PREMIUM
}

// Enum para los roles de usuario
enum RolUsuario {
  ADMINISTRADOR
  MESERO
  SUPER_ADMIN     // Nuevo rol para super administradores
}

// Enum para las monedas soportadas ⭐ NUEVO
enum Moneda {
  USD   // Dólar Estadounidense
  NIO   // Córdoba Nicaragüense
  CRC   // Colón Costarricense  
  HNL   // Lempira Hondureña
  GTQ   // Quetzal Guatemalteco
  PAB   // Balboa Panameña
  SVC   // Colón Salvadoreño
}

// Enum para los estados de orden (actualizados según PRD)
enum EstadoOrden {
  ENVIADA          // Cliente envió la orden
  RECIBIDA         // Restaurante recibió la orden
  CONFIRMADA       // Restaurante confirmó la orden
  EN_PREPARACION   // Orden en proceso de preparación
  LISTA            // Orden lista para servir
  SERVIDA          // Orden servida al cliente
  COMPLETADA       // Orden completada y pagada
  CANCELADA        // Orden cancelada
}

// Estados de sesión de mesa
enum EstadoSesion {
  ACTIVA           // Sesión activa, cliente presente
  INACTIVA         // Sesión inactiva, cliente temporalmente ausente
  CERRADA          // Sesión cerrada, cliente se fue
  EXPIRADA         // Sesión expirada por inactividad
}

// Estados de suscripción ⭐ NUEVO
enum EstadoSuscripcion {
  ACTIVA           // Suscripción activa y al día
  VENCIDA          // Suscripción vencida pero con gracia
  SUSPENDIDA       // Cuenta suspendida por falta de pago
  CANCELADA        // Suscripción cancelada por el usuario
  BLOQUEADA        // Cuenta bloqueada por administrador
}

// Tipos de notificación ⭐ NUEVO
enum TipoNotificacion {
  RENOVACION_PROXIMA    // Aviso de renovación próxima
  SUSCRIPCION_VENCIDA   // Suscripción vencida
  CUENTA_SUSPENDIDA     // Cuenta suspendida
  PAGO_CONFIRMADO       // Pago confirmado manualmente
  UPGRADE_PLAN          // Cambio de plan
  BIENVENIDA           // Mensaje de bienvenida
}

// Modelo de Planes
model Plan {
  id                String       @id @default(cuid())
  nombre            String       @unique
  descripcion       String?
  precio            Decimal      @default(0)
  limiteProductos   Int          @default(50)
  limiteOrdenes     Int          @default(200)
  limiteMesas       Int          @default(10)
  limiteMeseros     Int          @default(2)
  activo            Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  restaurantes      Restaurante[]
  suscripciones     Suscripcion[] // ⭐ NUEVO
  
  @@map("planes")
}

// Modelo de Suscripciones ⭐ NUEVO
model Suscripcion {
  id                String             @id @default(cuid())
  restauranteId     String             @unique
  planId            String
  estado            EstadoSuscripcion  @default(ACTIVA)
  fechaInicio       DateTime           @default(now())
  fechaVencimiento  DateTime
  fechaUltimoPago   DateTime?
  mesesPagados      Int                @default(1) // Meses pagados en la última renovación
  montoUltimoPago   Decimal?
  notasAdmin        String?            // Notas del super admin
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relaciones
  restaurante       Restaurante        @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  plan              Plan               @relation(fields: [planId], references: [id])
  historialPagos    HistorialPago[]    // ⭐ NUEVO
  
  @@map("suscripciones")
}

// Historial de Pagos ⭐ NUEVO
model HistorialPago {
  id                String       @id @default(cuid())
  suscripcionId     String
  monto             Decimal
  mesesPagados      Int          // Cantidad de meses pagados
  fechaPago         DateTime     @default(now())
  metodoPago        String?      // "Transferencia", "Efectivo", etc.
  referenciaPago    String?      // Número de referencia del pago
  procesadoPor      String?      // ID del super admin que procesó
  notas             String?
  createdAt         DateTime     @default(now())
  
  // Relaciones
  suscripcion       Suscripcion  @relation(fields: [suscripcionId], references: [id], onDelete: Cascade)
  
  @@map("historial_pagos")
}

// Super Usuarios ⭐ NUEVO
model SuperUsuario {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String
  nombre            String
  apellido          String?
  activo            Boolean      @default(true)
  lastLogin         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  notificacionesEnviadas NotificacionUsuario[] @relation("NotificacionEnviadaPor")
  
  @@map("super_usuarios")
}

// Notificaciones de Usuario ⭐ NUEVO
model NotificacionUsuario {
  id                String            @id @default(cuid())
  restauranteId     String
  tipo              TipoNotificacion
  titulo            String
  mensaje           String
  leida             Boolean           @default(false)
  fechaEnvio        DateTime          @default(now())
  fechaLectura      DateTime?
  enviadaPorId      String?           // Super admin que envió la notificación
  metadata          Json?             // Datos adicionales de la notificación
  createdAt         DateTime          @default(now())
  
  // Relaciones
  restaurante       Restaurante       @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  enviadaPor        SuperUsuario?     @relation("NotificacionEnviadaPor", fields: [enviadaPorId], references: [id])
  
  @@map("notificaciones_usuarios")
}

// Modelo de Restaurantes
model Restaurante {
  id                String       @id @default(cuid())
  nombre            String
  slug              String       @unique // URL amigable para el menú público
  descripcion       String?
  telefono          String?
  direccion         String?
  email             String?      @unique
  logoUrl           String?
  bannerUrl         String?
  backgroundImage   String?      // ⭐ NUEVO: Imagen de fondo personalizada para el menú público
  backgroundColor   String?      // ⭐ NUEVO: Color de fondo personalizado (hex color)
  planId            String
  activo            Boolean      @default(true)
  moneda            Moneda       @default(USD) // ⭐ NUEVO: Moneda del restaurante
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  plan              Plan         @relation(fields: [planId], references: [id])
  suscripcion       Suscripcion? // ⭐ NUEVO - Relación con suscripción
  usuariosAdmin     UsuarioAdmin[]
  usuariosMeseros   UsuarioMesero[]
  mesas             Mesa[]
  categorias        Categoria[]
  productos         Producto[]
  ordenes           Orden[]
  sesiones          Sesion[]     // Relación con sesiones de mesa
  notificaciones    NotificacionUsuario[] // ⭐ NUEVO
  
  @@map("restaurantes")
}

// Modelo de Usuarios Administradores
model UsuarioAdmin {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String
  nombre            String
  apellido          String?
  telefono          String?
  restauranteId     String
  activo            Boolean      @default(true)
  emailVerificado   Boolean      @default(false)
  lastLogin         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  
  @@map("usuarios_admin")
}

// Modelo de Usuarios Meseros
model UsuarioMesero {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String
  nombre            String
  apellido          String?
  telefono          String?
  restauranteId     String
  activo            Boolean      @default(true)
  lastLogin         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  ordenes           Orden[]      // Órdenes asignadas al mesero
  
  @@map("usuarios_meseros")
}

// Modelo de Mesas
model Mesa {
  id                String       @id @default(cuid())
  numero            String
  nombre            String?
  descripcion       String?
  capacidad         Int          @default(4) // Número de personas que puede acomodar la mesa
  qrCode            String       @unique // Código único para el QR
  qrImageUrl        String?      // URL de la imagen del QR generado
  restauranteId     String
  activa            Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  ordenes           Orden[]
  sesiones          Sesion[]     // Relación con sesiones de mesa
  
  @@unique([restauranteId, numero])
  @@map("mesas")
}

// Modelo de Sesiones de Mesa
model Sesion {
  id                String       @id @default(cuid())
  mesaId            String
  restauranteId     String
  sessionToken      String       @unique // Token único para identificar la sesión
  clienteNombre     String?      // Nombre del cliente (opcional)
  clienteTelefono   String?      // Teléfono del cliente (opcional)
  numeroPersonas    Int          @default(1) // Número de personas en la mesa
  estado            EstadoSesion @default(ACTIVA)
  inicioSesion      DateTime     @default(now())
  finSesion         DateTime?
  ultimaActividad   DateTime     @default(now())
  metadata          Json?        // Datos adicionales de la sesión (carrito temporal, preferencias, etc.)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  mesa              Mesa         @relation(fields: [mesaId], references: [id], onDelete: Cascade)
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  ordenes           Orden[]      // Órdenes realizadas en esta sesión
  
  @@map("sesiones")
}

// Modelo de Categorías
model Categoria {
  id                String       @id @default(cuid())
  nombre            String
  descripcion       String?
  imagenUrl         String?
  orden             Int          @default(0)
  restauranteId     String
  activa            Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  productos         Producto[]
  
  @@unique([restauranteId, nombre])
  @@map("categorias")
}

// Modelo de Productos
model Producto {
  id                String       @id @default(cuid())
  nombre            String
  descripcion       String?
  precio            Decimal
  imagenUrl         String?
  categoriaId       String
  restauranteId     String
  disponible        Boolean      @default(true)
  orden             Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relaciones
  categoria         Categoria    @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  restaurante       Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  itemsOrden        ItemOrden[]
  
  @@unique([restauranteId, categoriaId, nombre])
  @@map("productos")
}

// Modelo de Órdenes
model Orden {
  id                      String       @id @default(cuid())
  numeroOrden             String       @unique
  nombreClienteFactura    String?      // Campo para nombre del cliente para facturación
  mesaId                  String
  restauranteId           String
  sesionId                String?      // Relación opcional con la sesión de mesa
  meseroId                String?      // Mesero asignado a la orden
  estado                  EstadoOrden  @default(ENVIADA)
  subtotal                Decimal      @default(0)
  total                   Decimal      @default(0)
  notas                   String?
  fechaOrden              DateTime     @default(now())
  fechaConfirmacion       DateTime?
  fechaCompletada         DateTime?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  
  // Relaciones
  mesa                    Mesa         @relation(fields: [mesaId], references: [id])
  restaurante             Restaurante  @relation(fields: [restauranteId], references: [id], onDelete: Cascade)
  sesion                  Sesion?      @relation(fields: [sesionId], references: [id])
  mesero                  UsuarioMesero? @relation(fields: [meseroId], references: [id])
  items                   ItemOrden[]
  
  @@map("ordenes")
}

// Modelo de Items de Orden
model ItemOrden {
  id                String       @id @default(cuid())
  ordenId           String
  productoId        String
  cantidad          Int
  precioUnitario    Decimal
  subtotal          Decimal
  notas             String?
  createdAt         DateTime     @default(now())
  
  // Relaciones
  orden             Orden        @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  producto          Producto     @relation(fields: [productoId], references: [id])
  
  @@map("items_orden")
}

// Índices para optimizar consultas
// Índice compuesto para búsquedas frecuentes de productos por restaurante y categoría
// @@index([restauranteId, categoriaId], map: "idx_productos_restaurante_categoria")

// Índice para órdenes por restaurante y fecha
// @@index([restauranteId, fechaOrden], map: "idx_ordenes_restaurante_fecha")

// Índice para mesas activas por restaurante
// @@index([restauranteId, activa], map: "idx_mesas_restaurante_activas") 