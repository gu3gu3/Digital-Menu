name: 🚀 Deploy to Production (menuview.app)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  GCP_PROJECT_ID: digital-menu-455517
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: menuview-api
  FRONTEND_SERVICE_NAME: menuview-frontend

jobs:
  # ===============================
  # JOB 1: BUILD & TEST
  # ===============================
  build-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.generate_info.outputs.sha }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 📝 Generate Prisma Client
      run: npm exec --workspace=backend -- prisma generate

    - name: 🧪 Run backend tests
      run: npm run test --workspace=backend
      continue-on-error: true

    - name: 🏗️ Build frontend
      run: npm run build --workspace=frontend
      env:
        VITE_API_URL: https://api.menuview.app/api

    - name: 📋 Generate build info
      id: generate_info
      run: echo "sha=$(echo ${GITHUB_SHA} | cut -c1-8 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

  # ===============================
  # JOB 2: DEPLOY BACKEND API
  # ===============================
  deploy-backend:
    name: 🔧 Deploy Backend API
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    outputs:
      image_uri: ${{ steps.get_image_uri.outputs.IMAGE_URI }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🐳 Configure Docker for GCP
      run: gcloud auth configure-docker

    - name: 🔧 Deploy to Cloud Run (Backend)
      run: >-
        gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }}
        --source packages/backend
        --platform managed
        --region ${{ env.GCP_REGION }}
        --allow-unauthenticated
        --service-account menuview-run@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
        --set-cloudsql-instances ${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:menuview-db
        --set-env-vars NODE_ENV=production,FRONTEND_URL=https://menuview.app
        --set-secrets DATABASE_URL=database-url:latest,JWT_SECRET=jwt-secret:latest,SUPER_USER_EMAIL=super-user-email:latest,SUPER_USER_PASSWORD=super-user-password:latest,GCP_PROJECT_ID=gcp-project-id:latest,GCP_STORAGE_BUCKET=gcp-storage-bucket:latest
        --memory 1Gi
        --cpu 1
        --min-instances 1
        --max-instances 10
        --timeout 300s
        --tag build-${{ needs.build-test.outputs.sha }}
        --quiet

    - name: 📝 Get Backend Image URI
      id: get_image_uri
      run: |
        IMAGE_URI=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format="value(spec.template.spec.containers[0].image)")
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

  # ===============================
  # JOB 3: RUN DATABASE MIGRATIONS
  # ===============================
  migrate-database:
    name: 🗄️ Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🗄️ Run Database Migrations
      run: |
        cd packages/backend
        
        # Crear job temporal para migraciones
        gcloud run jobs create menuview-migrate-$(date +%s) \
          --image ${{ needs.deploy-backend.outputs.image_uri }} \
          --region ${{ env.GCP_REGION }} \
          --service-account menuview-run@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
          --set-cloudsql-instances ${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:menuview-db \
          --set-secrets DATABASE_URL=database-url:latest \
          --command npx \
          --args prisma,migrate,deploy,--schema=./prisma/schema.prisma \
          --max-retries 3 \
          --parallelism 1
        
        # Give secrets time to propagate
        sleep 30

        # Ejecutar migraciones
        JOB_NAME=$(gcloud run jobs list --filter="metadata.name:menuview-migrate" --sort-by="~metadata.creationTimestamp" --format="value(metadata.name)" --limit=1)
        gcloud run jobs execute $JOB_NAME --region=${{ env.GCP_REGION }} --wait

  # ===============================
  # JOB 3.5: SEED DATABASE
  # ===============================
  seed-database:
    name: 🌱 Seed Database
    runs-on: ubuntu-latest
    needs: migrate-database
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🌱 Run Database Seeding
      run: |
        # Crear job temporal para seeder
        gcloud run jobs create menuview-seed-$(date +%s) \
          --image ${{ needs.deploy-backend.outputs.image_uri }} \
          --region ${{ env.GCP_REGION }} \
          --service-account menuview-run@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
          --set-cloudsql-instances ${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:menuview-db \
          --set-secrets DATABASE_URL=database-url:latest \
          --command npm \
          --args run,db:seed:prod \
          --max-retries 3 \
          --parallelism 1
        
        # Give secrets time to propagate
        sleep 10
        
        # Ejecutar seeder
        JOB_NAME=$(gcloud run jobs list --filter="metadata.name:menuview-seed" --sort-by="~metadata.creationTimestamp" --format="value(metadata.name)" --limit=1)
        gcloud run jobs execute $JOB_NAME --region=${{ env.GCP_REGION }} --wait

  # ===============================
  # JOB 4: DEPLOY FRONTEND 
  # ===============================
  deploy-frontend:
    name: 🎨 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-test, deploy-backend, seed-database]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🏗️ Build Frontend for Production
      run: |
        cd packages/frontend
        npm install
        npm run build
      env:
        VITE_API_URL: https://api.menuview.app/api

    - name: 🚀 Deploy to Cloud Run (Frontend)
      id: deploy_frontend
      run: |
        cd packages/frontend
        
        # Crear Dockerfile temporal para frontend
        cat > Dockerfile << EOF
        FROM nginx:latest
        COPY dist /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        EXPOSE 8080
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        # Crear configuración nginx
        cat > nginx.conf << EOF
        server {
            listen 8080;
            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files \$uri \$uri/ /index.html;
            }
        }
        EOF
        
        gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --memory 256Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 5 \
          --port 8080 \
          --tag build-${{ needs.build-test.outputs.sha }} \
          --quiet

  # ===============================
  # JOB 5: CONFIGURE DOMAIN MAPPING
  # ===============================
  configure-domains:
    name: 🌐 Configure Domain Mapping
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🌐 Configure Domain Mappings
      run: |
        # Frontend domains
        gcloud run domain-mappings create \
          --service ${{ env.FRONTEND_SERVICE_NAME }} \
          --domain menuview.app \
          --region ${{ env.GCP_REGION }} || true

        gcloud run domain-mappings create \
          --service ${{ env.FRONTEND_SERVICE_NAME }} \
          --domain www.menuview.app \
          --region ${{ env.GCP_REGION }} || true

        # Backend API domain
        gcloud run domain-mappings create \
          --service ${{ env.BACKEND_SERVICE_NAME }} \
          --domain api.menuview.app \
          --region ${{ env.GCP_REGION }} || true 