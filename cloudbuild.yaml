steps:
# 1. Instalar dependencias del monorepo
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']
  id: 'Instalar-Dependencias'

# 2. Construir la imagen de Docker unificada
# Usamos el Dockerfile en la raíz que prepara frontend y backend
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA',
    '.'
  ]
  id: 'Construir-Imagen'

# 3. Subir la imagen a Artifact Registry
# Necesitaremos crear el repositorio 'menu-repo' en Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA']
  id: 'Subir-Imagen'

# 4. Ejecutar las migraciones de la base de datos (versión corregida y robusta)
# Este paso se conecta de forma segura a la base de datos y aplica las migraciones de Prisma.
- name: 'node:18'
  id: 'Aplicar-Migraciones'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Instalar dependencias
    echo "Instalando dependencias..."
    npm install --only=production

    # Iniciar Cloud SQL Proxy
    echo "Iniciando Cloud SQL Proxy..."
    wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.2/cloud-sql-proxy.linux.amd64 -O /cloud_sql_proxy
    chmod +x /cloud_sql_proxy
    /cloud_sql_proxy --address 0.0.0.0 --port 5432 "${_DB_CONNECTION_NAME}" &
    echo "Esperando que el proxy inicie (10 segundos)..."
    sleep 10

    # Usamos la variable MIGRATE_DB_URL que es única para este paso
    # Se usa $$ para escapar el $ y que Cloud Build lo interprete como una variable de shell
    export DATABASE_URL="$${MIGRATE_DB_URL}"
    
    # Ejecutar migraciones y seed
    echo "Aplicando migraciones..."
    npx prisma migrate deploy --schema=./packages/backend/prisma/schema.prisma
    
    echo "Poblando la base de datos..."
    npx prisma db seed --schema=./packages/backend/prisma/schema.prisma

  secretEnv: ['MIGRATE_DB_URL']

# 5. Desplegar la nueva imagen en Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Desplegar-En-Cloud-Run'
  args:
  - 'run'
  - 'deploy'
  - 'menuviewapp' # Nombre de nuestro servicio en Cloud Run
  - '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA'
  - '--region=us-central1'
  - '--platform=managed'
  - '--allow-unauthenticated'
  - '--set-secrets=DATABASE_URL=${_DATABASE_URL}:latest'
  - '--add-cloudsql-instances=${_DB_CONNECTION_NAME}'
  - '--port=8080' # El puerto que Nginx está escuchando

# Guardar la imagen en Artifact Registry
images:
- 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA'

# Configuración para acceder a los secretos
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/${_DATABASE_URL_MIGRATE}/versions/latest
    env: 'MIGRATE_DB_URL'

# Opciones de Build - NUEVA SECCIÓN
options:
  logging: CLOUD_LOGGING_ONLY 