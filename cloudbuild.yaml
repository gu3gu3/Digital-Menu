steps:
# 1. Instalar dependencias del monorepo
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']
  id: 'Instalar-Dependencias'

# 2. Construir la imagen de Docker unificada
# Usamos el Dockerfile en la raíz que prepara frontend y backend
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA',
    '.'
  ]
  id: 'Construir-Imagen'

# 3. Subir la imagen a Artifact Registry
# Necesitaremos crear el repositorio 'menu-repo' en Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA']
  id: 'Subir-Imagen'

# 4. Ejecutar las migraciones de la base de datos
- name: 'node:18'
  id: 'Aplicar-Migraciones'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Instalar dependencias del proyecto
    echo "Instalando dependencias de producción..."
    npm install --only=production

    # Descargar y hacer ejecutable el Cloud SQL Auth Proxy
    echo "Descargando Cloud SQL Proxy..."
    wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.2/cloud-sql-proxy.linux.amd64 -O /cloud_sql_proxy
    chmod +x /cloud_sql_proxy

    # Iniciar el proxy en segundo plano
    echo "Iniciando Cloud SQL Proxy..."
    /cloud_sql_proxy --address 0.0.0.0 --port 5432 "${_DB_CONNECTION_NAME}" &
    echo "Esperando 10 segundos para que el proxy establezca la conexión..."
    sleep 10
    
    # La variable DATABASE_URL está disponible aquí gracias a 'secretEnv'
    
    # Generar el cliente de Prisma para este entorno específico ANTES de usarlo.
    echo "Generando Prisma Client para el entorno de migración..."
    npx prisma generate --schema=./packages/backend/prisma/schema.prisma
    
    # Ejecutar migraciones y seed
    echo "Aplicando migraciones..."
    npx prisma migrate deploy --schema=./packages/backend/prisma/schema.prisma
    
    echo "Poblando la base de datos..."
    npx prisma db seed --schema=./packages/backend/prisma/schema.prisma

  secretEnv: ['DATABASE_URL']

# 5. Desplegar la nueva imagen en Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Desplegar-En-Cloud-Run'
  args:
  - 'run'
  - 'deploy'
  - 'menuviewapp' # Nombre de nuestro servicio en Cloud Run
  - '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA'
  - '--region=us-central1'
  - '--platform=managed'
  - '--allow-unauthenticated'
  - '--set-secrets=DATABASE_URL=DATABASE_URL:latest'
  - '--add-cloudsql-instances=${_DB_CONNECTION_NAME}'
  - '--port=8080' # El puerto que Nginx está escuchando

# Guardar la imagen en Artifact Registry
images:
- 'us-central1-docker.pkg.dev/${PROJECT_ID}/menu-repo/menuviewapp:$SHORT_SHA'

# Configuración para acceder a los secretos
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/${_DATABASE_URL_MIGRATE}/versions/latest
    env: 'DATABASE_URL' # Mapea el secreto de migración directamente a DATABASE_URL para el paso de migración

# Opciones de Build - NUEVA SECCIÓN
options:
  logging: CLOUD_LOGGING_ONLY 